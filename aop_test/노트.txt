스프링의 주요 특징 
	1. DI(Dependeny Injection)  ==> 객체
		의존성 자동주입
		==> 수정이 요구될 것 같은 어플리케션에 필요한 객체를
				소스코드내에서 직접 new 연산자에 의해 생성하지 않고 
				스프링 환경설정이 제공하는 것을 말합니다.
				이렇게 하면 수정이 요구되었을때 유연하게 대처할 수 있습니다. 
	 
	2. AOP(Aspect Oriented Programming)	==> 메소드
		관점 지향 프로그래밍 
		==> 객체 지향 프로그래밍(Object Oriented Programming) 하고 달라요?
				다른것이 아니고 객체지향 프로그래밍을 더 객체지향 답게 해 주는 것 입니다.
				
		
		자바로 만들어진 소프트웨어 속을 들여다 보면 
		수많은 클래스들로 구성이 되어 있습니다.
		
		사용자 요청에 의해 실제로 어떤 일을 
		수행하기 위해서는  메소드가 동작합니다.
		
		가령, 은행시스템을 생각해 보면
			주요 기능은
				잔액조회,
				대출신청,
				계좌이체 등이 있습니다.
				
				만약에 사용자가 잔액조회를 누르면
					잔액조회 일처리만을  위한 
					메소드 inquiry()동작되고
					
					대출신청을 누르면
					대출신청 처리 만을 위한 
					loan()이 동작되고
					
					계좌이체를 누르면
					계좌이체 처리만을 위한 
					transfer()메소드가 동작될 것입니다.
					
					각각의 일처리만 위한
						inquiry(), loan(), transfer()는
						"핵심관심사항" 이라고 합니다.
						
					만약에
					잔액조회를 하던지,
					대출신청을 하던지,
					계좌이체를 하던지
						서비스를 요청을 시간, 서비스명, ip주소등의 
						기록을 남겨야 한다면
						
						이러한 기록을 남기는 기능역시 
						"메소드"로 만들 수 있어요.
						이 메소드를 logging 이라고 만들었다면
						
						각각의 핵심 관심사항의 메소드 안에서 
							logging()이라고 호출 할 수 있어요.
							
						이러한 메소드를 "공통관심사항"이라고 합니다.
						
				 만약, 우리의 고객의 맨처음에는 로깅을 파일로 기록을 요구 했다가 
				 		프로젝트 진행중에 혹은 서비스중에 
				 		로깅을 데이터베이스에 기록하도록 
				 		수정을 요구했다면
				 		공통관심사항인 로깅을 위한 메소드를 다시 만들고 
				 		
				 		이것이 호출된 부분을 일일이 
				 		수정해야 할 것입니다.
				 		
				 		이것은 번거로운 일이고
				 		미처 수정되지 못하는 부분도 있을 수 있어요.
				 		
				 		이것을 스프링 
				 		환경설정파일이 대신 해 줄 수 있습니다.
				 			이것을 AOP라고 합니다.
				 			
				 			
				 		
				 					
				
				
		
		
		
		
		
		
		
		
		
				
	 